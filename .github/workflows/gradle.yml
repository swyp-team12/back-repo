name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Get Github Action IP
      id: ip
      uses: haythem/public-ip@v1.2

    - name: Setting NCP CLI & Credentials
      run: |
        cd ~
        wget https://www.ncloud.com/api/support/download/files/cli/CLI_1.1.23_20241121.zip -O ncp-cli.zip
        unzip ncp-cli.zip
        mv CLI_1.1.23_20241121/cli_linux ~/ncp-cli
        chmod +x ~/ncp-cli/ncloud
        mkdir -p ~/.ncloud
        echo -e "[DEFAULT]\nncloud_access_key_id = ${{ secrets.NCP_ACCESS_KEY }}\nncloud_secret_access_key = ${{ secrets.NCP_SECRET_KEY }}\nncloud_api_url = https://ncloud.apigw.ntruss.com" > ~/.ncloud/configure

    - name: Add Github Actions IP to NCP Security Group
      run: |
        chmod -R 777 ~/ncp-cli
        cd ~/ncp-cli
        ./ncloud vserver addAccessControlGroupInboundRule \
          --regionCode KR \
          --vpcNo ${{ secrets.NCP_VPC_NO }} \
          --accessControlGroupNo ${{ secrets.NCP_AGC_NO }} \
          --accessControlGroupRuleList "protocolTypeCode='TCP',ipBlock='${{ steps.ip.outputs.ipv4 }}/32',portRange='22'"

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Create application.properties
      run: |
        mkdir -p src/main/resources
        echo "spring.application.name=yomi-backend" > src/main/resources/application.properties
        # Kakao 설정
        echo "kakao.apikey=815edb7e2bc243e280f527ca4de5117c" >> src/main/resources/application.properties
        echo "kakao.redirect-uri=http://${{ secrets.EC2_HOST }}:${{ secrets.SSH_PORT }}/api/user/kakao/callback" >> src/main/resources/application.properties
        # JWT 설정
        echo "jwt.secret.key=OssaD4FoPe7BreiqedEKuVmPXRbnvl24WCNUV7PIPmTpDZftVGC7Xrxd1UPxAw91YP8qlYK5lMlWwut44x0mg" >> src/main/resources/application.properties
        # DB 설정
        echo "spring.datasource.url=jdbc:mysql://${{ secrets.MYSQL_HOST }}:15443/YOMI_DEV" >> src/main/resources/application.properties
        echo "spring.datasource.username=${{ secrets.MYSQL_USERNAME }}" >> src/main/resources/application.properties
        echo "spring.datasource.password=${{ secrets.MYSQL_PASSWORD }}" >> src/main/resources/application.properties
        echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
        echo "spring.jpa.hibernate.ddl-auto=create" >> src/main/resources/application.properties
        echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect" >> src/main/resources/application.properties
        # NCP 설정
        echo "ncp.apikey=${{ secrets.NCP_API_KEY }}" >> src/main/resources/application.properties
        echo "ncp.apiurl=${{ secrets.NCP_API_URL }}" >> src/main/resources/application.properties
        # Server 설정
        echo "server.address=0.0.0.0" >> src/main/resources/application.properties
        echo "server.port=${{ secrets.SSH_PORT }}" >> src/main/resources/application.properties

    - name: 테스트 및 빌드하기
      run: ./gradlew clean build -x test

    - name: 빌드된 파일 이름 변경하기
      run: mv ./build/libs/*SNAPSHOT.jar ./project.jar
        
    - name: SCP로 NCP에 빌드된 파일 전송하기
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}  # NCP 호스트 주소
        username: ${{ secrets.SSH_USERNAME }} # SSH_USERNAME은 Secrets에 설정한 사용자 이름
        password: ${{ secrets.SSH_PASSWORD }}  # SSH 비밀번호
        key: ${{ secrets.EC2_SSH_KEY }}  # NCP 비공개 키
        source: project.jar  # 빌드된 JAR 파일 경로
        target: /home/ncp-user/yomi-backend/tobe  # 배포될 폴더
    
    - name: SSH로 NCP에 접속하여 배포하기
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}  # SSH 비밀번호
        key: ${{ secrets.NCP_SSH_KEY }}
        script_stop: true
        script: |
          # 기존 서버 중지 및 새 JAR 파일 실행
          echo "Starting deployment process..."
        
          # 기존 서버 중지
          rm -rf /home/ncp-user/yomi-backend/current
          mkdir /home/ncp-user/yomi-backend/current
          mv /home/ncp-user/yomi-backend/tobe/project.jar /home/ncp-user/yomi-backend/current/project.jar
          cd /home/ncp-user/yomi-backend/current
        
          # 포트 점유 프로세스 종료
          PORT=${{ secrets.SSH_PORT }}  # secrets에서 포트 번호 가져오기
          echo "Killing process using port $PORT..."
          if lsof -t -i:$PORT; then
            sudo lsof -t -i:$PORT | xargs kill -9
            echo "Process using port $PORT has been terminated."
          else
            echo "No process found using port $PORT."
          fi
        
          # 실행 권한 부여
          chmod +x project.jar  # 실행 권한 부여
        
          # 애플리케이션 백그라운드 실행
          nohup java -jar project.jar > ./output.log 2>&1 &  # 백그라운드 실행
          echo "Application started. Logs will be written to ./output.log"
        
          # 로그 파일 모니터링 (선택 사항)
          tail -f ./output.log  # 로그 확인 (배포 후 상태 체크)
        
          # 불필요한 폴더 삭제
          rm -rf /home/ncp-user/yomi-backend/tobe  # 불필요한 폴더 삭제

    - name: Remove Github Actions IP from NCP Security Group
      run: |
        chmod -R 777 ~/ncp-cli
        cd ~/ncp-cli
        ./ncloud vserver removeAccessControlGroupInboundRule \
          --regionCode KR \
          --vpcNo ${{ secrets.NCP_VPC_NO }} \
          --accessControlGroupNo ${{ secrets.NCP_AGC_NO }} \
          --accessControlGroupRuleList "protocolTypeCode='TCP',ipBlock='${{ steps.ip.outputs.ipv4 }}/32',portRange='22'"

